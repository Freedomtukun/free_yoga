import cv2
import mediapipe as mp
import numpy as np
import pyttsx3
import json
import time
import threading

# -------------------------------
# 初始化部分
# -------------------------------

# 初始化 MediaPipe 姿势检测
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()
mp_drawing = mp.solutions.drawing_utils

# 初始化语音引擎
engine = pyttsx3.init()

# -------------------------------
# 辅助函数
# -------------------------------

def speak(text):
    """语音播报（同步调用）"""
    engine.say(text)
    engine.runAndWait()

def speak_async(text):
    """异步语音播报，防止阻塞主线程"""
    threading.Thread(target=speak, args=(text,)).start()

def calculate_angle(a, b, c):
    """
    计算由点 a, b, c 构成的角度（以 b 为顶点），单位为度，
    并对除零情况进行处理
    """
    a, b, c = np.array(a), np.array(b), np.array(c)
    ba = a - b
    bc = c - b
    norm_ba = np.linalg.norm(ba)
    norm_bc = np.linalg.norm(bc)
    if norm_ba == 0 or norm_bc == 0:
        return 0.0
    cosine_angle = np.dot(ba, bc) / (norm_ba * norm_bc)
    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
    return np.degrees(angle)

# -------------------------------
# 定义 100 个瑜伽体式的名称列表
# -------------------------------
yoga_pose_names = [
    "山式", "树式", "战士一式", "战士二式", "战士三式", "下犬式", "上犬式", "三角式", "扩展侧角式", "坐姿前屈",
    "眼镜蛇式", "犁式", "鱼式", "桥式", "蝗虫式", "猫牛式", "儿童式", "半月式", "鸽子式", "乌鸦式",
    "蝴蝶式", "船式", "坐姿扭转", "弓式", "骆驼式", "莲花式", "战士四式", "半莲花式", "山猫式", "卧英雄式",
    "半英雄式", "半月侧角式", "侧角伸展式", "仰卧扭转式", "仰卧腿举式", "前屈式", "站立前屈", "侧卧平衡式", "侧平板式", "头倒立",
    "肩倒立", "鱼式变体", "仰卧桥式", "坐姿脊柱扭转", "半背式", "龙式", "飞燕式", "鸽子扭转式", "半鸽式", "折叠式",
    "坐姿平衡式", "侧身伸展式", "扭转平板式", "仰卧侧角式", "变式下犬", "变式上犬", "战士变体", "侧桥式", "站立扭转", "前弓步",
    "后弓步", "侧弓步", "倒箭式", "倒箭变体", "侧卧扭转", "躺姿扭转", "伸展猫牛式", "脊柱伸展式", "全莲花式", "双莲花式",
    "单莲花式", "简单坐姿", "静坐冥想式", "手牵手式", "双手合十式", "单手托天式", "合掌式", "神猴式", "飞行式", "高脚杯式",
    "站立侧弯式", "四角式", "变式桥式", "提踵式", "腰部伸展式", "背部扭转式", "腿部伸展式", "双腿交叉式", "摇篮式", "仰卧提腿式",
    "站立平衡扭转式", "背后交叉式", "飞鸟式", "扩展莲花式", "静默式", "灵魂式", "灵动式", "光明式", "觉醒式", "喜悦式"
]

# -------------------------------
# 构造 100 个瑜伽体式的标准角度字典
# -------------------------------
POSES = {}
# 这里采用简单公式为每个体式生成标准角度，数据仅供测试参考
for idx, pose_name in enumerate(yoga_pose_names, start=1):
    # 例如：左肘和右肘的标准角度为 150 到 159 度之间，左膝和右膝为 90 到 99 度之间
    POSES[pose_name] = {
        "left_elbow": 150 + (idx % 10),
        "right_elbow": 150 + (idx % 10),
        "left_knee": 90 + (idx % 10),
        "right_knee": 90 + (idx % 10)
    }

def process_frame(frame):
    """
    处理单帧图像：
    - 将图像转换为 RGB 并进行姿势检测
    - 计算关键关节角度
    - 遍历预设的 100 个瑜伽体式，计算匹配得分（得分越高表示与该体式标准越接近）
    - 绘制骨架及在画面上标注中文提示（体式名称和得分）
    返回处理后的图像、最佳体式名称和得分
    """
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(rgb_frame)
    
    best_pose = "未知"
    best_score = 0

    if results.pose_landmarks:
        landmarks = results.pose_landmarks.landmark

        def get_landmark_point(landmark):
            return [landmarks[landmark].x, landmarks[landmark].y]

        # 获取正面关键点坐标
        shoulder_l, elbow_l, wrist_l = map(get_landmark_point, [
            mp_pose.PoseLandmark.LEFT_SHOULDER,
            mp_pose.PoseLandmark.LEFT_ELBOW,
            mp_pose.PoseLandmark.LEFT_WRIST
        ])
        shoulder_r, elbow_r, wrist_r = map(get_landmark_point, [
            mp_pose.PoseLandmark.RIGHT_SHOULDER,
            mp_pose.PoseLandmark.RIGHT_ELBOW,
            mp_pose.PoseLandmark.RIGHT_WRIST
        ])
        hip_l, knee_l, ankle_l = map(get_landmark_point, [
            mp_pose.PoseLandmark.LEFT_HIP,
            mp_pose.PoseLandmark.LEFT_KNEE,
            mp_pose.PoseLandmark.LEFT_ANKLE
        ])
        hip_r, knee_r, ankle_r = map(get_landmark_point, [
            mp_pose.PoseLandmark.RIGHT_HIP,
            mp_pose.PoseLandmark.RIGHT_KNEE,
            mp_pose.PoseLandmark.RIGHT_ANKLE
        ])

        # 计算各个角度
        angles = {
            "left_elbow": calculate_angle(shoulder_l, elbow_l, wrist_l),
            "right_elbow": calculate_angle(shoulder_r, elbow_r, wrist_r),
            "left_knee": calculate_angle(hip_l, knee_l, ankle_l),
            "right_knee": calculate_angle(hip_r, knee_r, ankle_r)
        }

        # 遍历 100 个体式，计算匹配得分
        for pose_name, angles_dict in POSES.items():
            scores = [
                max(0, 100 - abs(standard_angle - angles.get(joint, 0)))
                for joint, standard_angle in angles_dict.items()
            ]
            pose_score = int(np.mean(scores)) if scores else 0
            if pose_score > best_score:
                best_score = pose_score
                best_pose = pose_name

        # 示例：对“下犬式”添加语音提示（你可以为其它体式也添加相应提示）
        if best_pose == "下犬式":
            if angles.get("left_knee", 0) < 85:
                speak_async("左膝盖需要再弯曲一点")
            if angles.get("right_knee", 0) < 85:
                speak_async("右膝盖需要再弯曲一点")

        # 绘制骨架
        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        # 在画面上标注中文信息：体式名称和得分
        cv2.putText(frame, f"体式: {best_pose} ({best_score}%)", (50, 100),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,255), 2)
        cv2.putText(frame, f"得分: {best_score}%", (50, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2)
    
    return frame, best_pose, best_score

def main():
    # 打开正面摄像头（设备号 0）
    cap_front = cv2.VideoCapture(0)
    
    # 尝试打开侧面摄像头（设备号 1），若没有则置为 None
    cap_side = cv2.VideoCapture(1)
    if not cap_side.isOpened():
        cap_side = None

    # 设置视频录制参数
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter('yoga_practice.avi', fourcc, 20.0, (640,480))

    last_pose = "未知"
    last_score = 0

    while cap_front.isOpened():
        ret, frame_front = cap_front.read()
        if not ret:
            break
        
        annotated_front, best_pose, best_score = process_frame(frame_front)
        last_pose, last_score = best_pose, best_score
        
        if cap_side:
            ret_side, frame_side = cap_side.read()
            if ret_side:
                annotated_side, _, _ = process_frame(frame_side)
                annotated_side = cv2.resize(annotated_side, (annotated_front.shape[1], annotated_front.shape[0]))
                combined_frame = np.hstack((annotated_front, annotated_side))
            else:
                combined_frame = annotated_front
        else:
            combined_frame = annotated_front
        
        out.write(combined_frame)
        cv2.imshow('瑜伽姿势检测', combined_frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    out.release()
    cap_front.release()
    if cap_side:
        cap_side.release()
    cv2.destroyAllWindows()
    
    log_data = {
        "时间": time.strftime("%Y-%m-%d %H:%M:%S"),
        "体式": last_pose,
        "得分": last_score
    }
    with open("yoga_report.json", "a", encoding="utf-8") as f:
        json.dump(log_data, f, ensure_ascii=False)
        f.write("\n")

if __name__ == "__main__":
    main()
