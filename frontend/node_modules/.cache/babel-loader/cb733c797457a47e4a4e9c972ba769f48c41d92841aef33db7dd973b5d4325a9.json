{"ast":null,"code":"var _jsxFileName = \"/Users/zhang/Desktop/smartyoga/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// 创建认证上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// 创建认证提供者组件\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 登录函数\n  const login = userData => {\n    // 在实际应用中，这里会调用API进行登录\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentUser(userData);\n  };\n\n  // 注销函数\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n\n  // 注册函数\n  const register = userData => {\n    // 在实际应用中，这里会调用API进行注册\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentUser(userData);\n  };\n\n  // 初始化时检查本地存储中是否有用户信息\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  // 提供给上下文的值\n  const value = {\n    currentUser,\n    login,\n    logout,\n    register,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义钩子，便于在组件中访问认证上下文\n_s(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","login","userData","localStorage","setItem","JSON","stringify","logout","removeItem","register","storedUser","getItem","parse","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/zhang/Desktop/smartyoga/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// 创建认证上下文\nconst AuthContext = createContext();\n\n// 创建认证提供者组件\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  \n  // 登录函数\n  const login = (userData) => {\n    // 在实际应用中，这里会调用API进行登录\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentUser(userData);\n  };\n  \n  // 注销函数\n  const logout = () => {\n    localStorage.removeItem('user');\n    setCurrentUser(null);\n  };\n  \n  // 注册函数\n  const register = (userData) => {\n    // 在实际应用中，这里会调用API进行注册\n    localStorage.setItem('user', JSON.stringify(userData));\n    setCurrentUser(userData);\n  };\n  \n  // 初始化时检查本地存储中是否有用户信息\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  \n  // 提供给上下文的值\n  const value = {\n    currentUser,\n    login,\n    logout,\n    register,\n    loading\n  };\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\n// 自定义钩子，便于在组件中访问认证上下文\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport default AuthContext;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMY,KAAK,GAAIC,QAAQ,IAAK;IAC1B;IACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;IACtDJ,cAAc,CAACI,QAAQ,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMK,MAAM,GAAGA,CAAA,KAAM;IACnBJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;IAC/BV,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMW,QAAQ,GAAIP,QAAQ,IAAK;IAC7B;IACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;IACtDJ,cAAc,CAACI,QAAQ,CAAC;EAC1B,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMoB,UAAU,GAAGP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAID,UAAU,EAAE;MACdZ,cAAc,CAACO,IAAI,CAACO,KAAK,CAACF,UAAU,CAAC,CAAC;IACxC;IACAV,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMa,KAAK,GAAG;IACZhB,WAAW;IACXI,KAAK;IACLM,MAAM;IACNE,QAAQ;IACRV;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlB,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;;AAED;AAAAtB,EAAA,CAjDaF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAkDzB,OAAO,MAAM0B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOjC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAAC4B,GAAA,CAFWD,OAAO;AAIpB,eAAe3B,WAAW;AAAC,IAAA0B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}